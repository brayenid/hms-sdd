<section class="dark:bg-gray-900 flex flex-col gap-4">
  <div class="content_container">
    <h2 class="subhead">Atur Harga Ekstra</h2>
    <div
      class="lg:col-span-4 flex items-center w-full p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400"
      role="alert">
      <svg
        class="flex-shrink-0 inline w-4 h-4 me-3"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="currentColor"
        viewBox="0 0 20 20">
        <path
          d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
      </svg>
      <span class="sr-only">Info</span>
      <div><span class="font-medium">Info!</span> Halaman ini hanya bisa diakses oleh super admin</div>
    </div>
    <form id="form-extra" class="main_form">
      <div class="grid gap-4 sm:grid-cols-2 sm:gap-6 form-content"></div>
      <button type="submit">Ubah</button>
    </form>
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // CURRENCY STUFF
    const addCurrency = (number, currency) => {
      const processed = number
        .split('.')
        .join('')
        .toString()
        .replace(/\B(?=(\d{3})+(?!\d))/g, '.')
      if (currency) {
        return `${currency}. ${processed}`
      }
      return processed
    }
    const addSeparator = (number) => {
      const numString = number.toString()
      const parts = numString.split('.')
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, '.')
      const formattedNumber = parts.join('.')

      return formattedNumber
    }
    const removeCurrency = (number) => {
      return parseFloat(number.toString().replace(/\./g, ''))
    }
    const sanitizeNonNumber = (value) => {
      return value.replace(/[^0-9.]/g, '')
    }

    const capitalizeFirstLetter = (str) => {
      if (typeof str !== 'string') {
        throw new Error('Input harus berupa string')
      }

      return str.charAt(0).toUpperCase() + str.slice(1)
    }

    // FORM STUFF
    const formExtra = document.querySelector('#form-extra')
    const response = (await axios.get('/api/extraprice')).data.data
    const formPlaceholder = formExtra.querySelector('.form-content')

    response.forEach((data) => {
      formPlaceholder.innerHTML += `
        <div class="sm:col-span-1">
          <label for="${data.extra}">${capitalizeFirstLetter(data.extra)}</label>
          <input type="text" id="${
            data.extra
          }" placeholder="Masukan harga ekstra orang" required="" value="${addSeparator(data.price)}" />
        </div>
        `
    })

    const extraPerson = document.querySelector('#person')
    const extraBed = document.querySelector('#bed')
    const extraBreakfast = document.querySelector('#breakfast')

    extraPerson.addEventListener('input', (e) => {
      e.target.value = sanitizeNonNumber(e.target.value, 'Rp')
      e.target.value = addCurrency(e.target.value)
    })

    extraBed.addEventListener('input', (e) => {
      e.target.value = sanitizeNonNumber(e.target.value, 'Rp')
      e.target.value = addCurrency(e.target.value)
    })

    extraBreakfast.addEventListener('input', (e) => {
      e.target.value = sanitizeNonNumber(e.target.value, 'Rp')
      e.target.value = addCurrency(e.target.value)
    })

    formExtra.addEventListener('submit', async (e) => {
      e.preventDefault()
      const person = removeCurrency(formExtra.querySelector('#person').value)
      const bed = removeCurrency(formExtra.querySelector('#bed').value)
      const breakfast = removeCurrency(formExtra.querySelector('#breakfast').value)

      const { isConfirmed } = await Swal.fire({
        title: 'Ubah Harga',
        text: 'Yakin mengubah harga ekstra?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Ubah',
        cancelButtonText: 'Batal'
      })

      if (isConfirmed) {
        try {
          await axios.put('/api/extraprice', { person, bed, breakfast })
          await Swal.fire({
            title: 'Berhasil!',
            text: 'Anda berhasil memperbaharui harga ekstra',
            icon: 'success',
            confirmButtonText: 'Oke!'
          })
          location.reload()
        } catch (error) {
          const errMessage = error.response.data.message
          await Swal.fire({
            title: 'Error!',
            text: errMessage,
            icon: 'error',
            confirmButtonText: 'Tutup'
          })
        }
      }
    })
  })
</script>
