<section class="dark:bg-gray-900 flex flex-col gap-4">
  <div class="content_container">
    <h2 class="subhead">Edit/hapus kategori kamar</h2>
    <form id="form-category" class="main_form">
      <div class="grid gap-4 sm:grid-cols-2 sm:gap-6">
        <div class="sm:col-span-1">
          <label for="name">Nama Kategori</label>
          <input
            type="text"
            name="category"
            id="name"
            placeholder="Masukan kategori kamar"
            required
            value="<%= data.category %>" />
        </div>
        <div class="sm:col-span-1">
          <label for="price">Harga Kategori</label>
          <input type="text" name="price" id="price" required value="<%= addSeparator(data.price)  %>" />
        </div>
        <div class="sm:col-span-2">
          <label for="detail" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Keterangan</label>
          <textarea
            id="detail"
            rows="4"
            class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            placeholder="Masukan keterangan kategori...">
<%= data.detail %></textarea
          >
        </div>
      </div>
      <button type="submit">Ubah</button>
      <button type="button" id="delete-btn" onClick="deleteRoomCat()" class="red">Hapus</button>
      <a
        href="/category"
        class="px-4 py-3 text-sm font-medium text-white bg-rose-700 border border-gray-200 rounded-lg md:w-auto focus:outline-none hover:bg-rose-800 hover:text-white focus:ring-4 focus:ring-rose-200 dark:focus:ring-rose-900 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
        Kembali
      </a>
    </form>
    <div class="mt-4 text-right text-xs dark:text-gray-300">Terakhir diubah : <%= data.updated_at %></div>
    <div class="text-right text-xs dark:text-gray-300">Diubah oleh : <%= data.updatedBy %></div>
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // CURRENCY STUFF
    const addCurrency = (number, currency) => {
      const processed = number
        .split('.')
        .join('')
        .toString()
        .replace(/\B(?=(\d{3})+(?!\d))/g, '.')
      if (currency) {
        return `${currency}. ${processed}`
      }
      return processed
    }
    const removeCurrency = (number) => {
      return parseFloat(number.toString().replace(/\./g, ''))
    }
    const sanitizeNonNumber = (value) => {
      return value.replace(/[^0-9.]/g, '')
    }
    const input = document.querySelector('#price')
    input.addEventListener('input', (e) => {
      e.target.value = sanitizeNonNumber(e.target.value, 'Rp')
      e.target.value = addCurrency(e.target.value)
    })

    // FORM STUFF
    const formCategory = document.querySelector('#form-category')
    formCategory.addEventListener('submit', async (e) => {
      e.preventDefault()
      const categoryName = formCategory.querySelector('#name').value
      const categoryPrice = removeCurrency(formCategory.querySelector('#price').value)
      const categoryDetail = formCategory.querySelector('#detail').value

      const payload = {
        category: categoryName,
        price: categoryPrice,
        detail: categoryDetail
      }

      const { isConfirmed } = await Swal.fire({
        title: 'Perbaharui Kategori',
        text: 'Yakin mengubah kategori?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Ubah',
        cancelButtonText: 'Batal'
      })

      if (isConfirmed) {
        try {
          await axios.put('/api/rooms/category/<%= data.id%>', payload)
          await Swal.fire({
            title: 'Berhasil!',
            text: 'Anda berhasil mengubah kategori',
            icon: 'success',
            confirmButtonText: 'Oke!'
          })
          location.replace('/category')
        } catch (error) {
          const errMessage = error.response.data.message
          await Swal.fire({
            title: 'Error!',
            text: errMessage,
            icon: 'error',
            confirmButtonText: 'Tutup'
          })
        }
      }
    })
  })

  // DELETE STUFF
  const deleteRoomCat = async () => {
    const { isConfirmed } = await Swal.fire({
      title: 'Hapus Kategori',
      text: 'Yakin menghapus kategori?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Hapus',
      cancelButtonText: 'Batal'
    })

    if (isConfirmed) {
      try {
        await axios.delete('/api/rooms/category/<%=data.id%>')
        await Swal.fire({
          title: 'Berhasil!',
          text: 'Anda berhasil menghapus kategori',
          icon: 'success',
          confirmButtonText: 'Oke!'
        })
        location.replace('/category')
      } catch (error) {
        const errMessage = error.response.data.message
        await Swal.fire({
          title: 'Error!',
          text: errMessage,
          icon: 'error',
          confirmButtonText: 'Tutup'
        })
      }
    }
  }
</script>
