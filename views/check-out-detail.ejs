<section class="dark:bg-gray-900 flex flex-col gap-4">
  <h2 class="text-lg dark:text-white">Detail Check-Out Pada :</h2>
  <div class="content_container !p-0 !border-0">
    <div class="flex justify-between items-center indigo-pink rounded-lg">
      <h3 class="text-lg sm:text-2xl text-center w-full py-10 text-white font-extrabold">
        <span class="text-white/50">IN : </span> <%= detail.startDateReverse %>
      </h3>
      <p>
        <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10 text-white" viewBox="0 0 256 256">
          <path
            fill="currentColor"
            d="m181.66 133.66l-80 80a8 8 0 0 1-11.32-11.32L164.69 128L90.34 53.66a8 8 0 0 1 11.32-11.32l80 80a8 8 0 0 1 0 11.32" />
        </svg>
      </p>
      <h3 class="text-lg sm:text-2xl text-center w-full ] py-10 text-white font-extrabold">
        <span class="text-white/50">OUT : </span> <%= detail.endDateReverse %>
      </h3>
    </div>
  </div>
  <div class="content_container flex flex-col lg:flex-row gap-4">
    <form id="form-checkin" class="main_form flex-[2]">
      <div class="grid gap-4 lg:grid-cols-4 lg:gap-6">
        <div class="lg:col-span-2 relative">
          <label for="room-list">ID Kamar</label>
          <input type="text" id="room-list" placeholder="Masukan kamar" required="" value="<%= detail.room %>" />
          <div
            class="absolute top-[4.5rem] rounded-lg bg-white dark:bg-gray-900 dark:text-white z-20 w-full min-h-10 max-h-96 overflow-y-auto border border-gray-300 hide cursor-pointer"
            id="rooms-list-suggestion">
            <ul></ul>
          </div>
        </div>
        <div class="lg:col-span-2">
          <label for="room-booker">Pemesan</label>
          <input
            type="text"
            id="room-booker"
            required=""
            value="<%= detail.bookedBy %>"
            disabled
            class="input-disable" />
        </div>
        <div class="lg:col-span-2 relative">
          <label for="room-guest">Tamu</label>
          <input
            type="text"
            id="room-guest"
            placeholder="Masukan nama tamu terdaftar"
            required
            class="input-disable"
            disabled
            value="<%= detail.guestName %> - <%= detail.phone %>" />
        </div>
        <div class="lg:col-span-2">
          <label for="room-deposit">Deposit</label>
          <input
            type="text"
            id="room-deposit"
            placeholder="Masukan jumlah deposit"
            required
            class="input-disable"
            disabled
            value="0" />
        </div>
        <div class="lg:col-span-4">
          <hr class="h-px my-2 bg-gray-200 border-0 dark:bg-gray-700" />
        </div>
        <!-- EXTRA -->
        <div class="lg:col-span-4">
          <h2 class="my-2 text-xl font-bold text-gray-900 dark:text-white">Ekstra :</h2>
        </div>
        <div class="lg:col-span-1">
          <label for="room-person">Orang (<span class="add-person-init"></span>)</label>
          <select id="room-person"></select>
        </div>
        <div class="lg:col-span-1">
          <label for="room-bed">Bed (<span class="add-bed-init"></span>)</label>
          <select id="room-bed"></select>
        </div>
        <div class="lg:col-span-1">
          <label for="room-breakfast">Sarapan (<span class="add-breakfast-init"></span>)</label>
          <select id="room-breakfast"></select>
        </div>
        <div class="lg:col-span-1">
          <label for="room-decor">Dekorasi</label>
          <input type="text" id="room-decor" value="<%= addSeparator(detail.extraDecor) %>" />
        </div>
        <div class="lg:col-span-4 border-b border-gray-200 dark:border-gray-700 pb-4"></div>
        <!-- FINES -->
        <div class="lg:col-span-4 fines-input-container border-b border-gray-200 dark:border-gray-700 pb-4">
          <div id="accordion-fines" data-accordion="collapse" data-active-classes="text-gray-900 dark:text-white">
            <h2 id="accordion-fines-heading">
              <button
                type="button"
                class="flex items-center justify-between w-full font-medium rtl:text-right text-gray-900 dark:text-white gap-3"
                data-accordion-target="#accordion-fines-body"
                aria-expanded="false"
                aria-controls="accordion-fines-body">
                <span class="my-2 text-xl font-bold text-gray-900 dark:text-white flex items-center gap-3"
                  >Denda-denda :
                  <span class="text-xs p-1 font-normal rounded bg-indigo-400 dark:bg-gray-700 text-white"
                    >Klik untuk buka</span
                  ></span
                >
                <svg
                  data-accordion-icon
                  class="w-3 h-3 rotate-180 shrink-0"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 10 6">
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5 5 1 1 5" />
                </svg>
              </button>
            </h2>
            <div id="accordion-fines-body" class="hidden border-0" aria-labelledby="accordion-fines-heading">
              <div class="grid gap-4 sm:grid-cols-3 mt-4 sm:gap-6 fines-container"></div>
            </div>
          </div>
        </div>
        <!-- TOTAL -->
        <div
          class="lg:col-span-4 flex items-center w-full p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400"
          role="alert">
          <svg
            class="flex-shrink-0 inline w-4 h-4 me-3"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 20 20">
            <path
              d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
          </svg>
          <span class="sr-only">Info</span>
          <div>
            <span class="font-medium">Info!</span>
            Deposit yang dikembalikan sesuai dengan yang tercatat pada kotak deposit
          </div>
        </div>
        <div class="lg:col-span-4 flex items-center flex-col lg:flex-row gap-2">
          <label for="room-total" class="flex-[1]">Harga (Kamar + Ekstra)</label>
          <input type="text" id="room-total" required="" class="flex-[2] input-disable" value="0" disabled />
        </div>
        <div class="lg:col-span-4 flex items-center flex-col lg:flex-row gap-2">
          <label for="room-paid" class="flex-[1]">Sudah Terbayar</label>
          <input type="text" id="room-paid" required="" class="flex-[2] input-disable" value="0" disabled />
        </div>
        <div class="lg:col-span-4 flex items-center flex-col lg:flex-row gap-2">
          <label for="room-fines" class="flex-[1]">Denda</label>
          <input
            type="text"
            id="room-fines"
            required=""
            class="flex-[2] !bg-gray-50 !border-red-600 !text-red-600 dark:!text-white dark:!bg-gray-700"
            value="0"
            disabled />
        </div>
        <div class="lg:col-span-4 flex items-center flex-col lg:flex-row gap-2">
          <label for="room-sales" class="flex-[1]">Transaksi Barang Tambahan</label>
          <input
            type="text"
            id="room-sales"
            required=""
            class="flex-[2] !bg-gray-50 !border-fuchsia-600 !text-fuchsia-600 dark:!text-white dark:!bg-gray-700"
            value="0"
            disabled />
        </div>
        <div class="lg:col-span-4">
          <hr class="h-px my-2 bg-gray-200 border-0 dark:bg-gray-700" />
        </div>
        <div class="lg:col-span-4 flex items-center flex-col lg:flex-row gap-2">
          <label for="room-discount" class="flex-[1]">Potongan Harga</label>
          <input
            type="text"
            id="room-discount"
            class="flex-[2] !bg-gray-50 !border-red-600 !text-red-600 dark:!text-white dark:!bg-gray-700"
            value="<%= addSeparator(detail.discount) %>"
            disabled />
        </div>
        <div class="lg:col-span-4 flex items-center flex-col lg:flex-row gap-2">
          <label for="room-co-total" class="flex-[1]">Total Pembayaran Tambahan</label>
          <input
            type="text"
            id="room-co-total"
            required=""
            class="flex-[2] !bg-gray-50 !border-green-600 !text-green-600 dark:!text-white dark:!bg-gray-700"
            value="0"
            disabled />
        </div>
        <div class="lg:col-span-4">
          <hr class="h-px my-2 bg-gray-200 border-0 dark:bg-gray-700" />
        </div>
      </div>
      <div class="grid gap-4 lg:grid-cols-3 lg:gap-6 p-6 border border-red-500 rounded-lg mb-4">
        <div class="lg:col-span-4 flex !items-center gap-4">
          <input
            id="credit-checkbox"
            type="checkbox"
            class="!w-max checked:!bg-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />

          <label for="credit-checkbox" class="text-sm font-medium text-gray-900 dark:text-gray-300 !mb-0"
            >Kredit
          </label>
        </div>
        <div class="lg:col-span-1 relative">
          <label for="credit-id"
            >ID Tagihan -
            <a
              class="text-blue-500 hover:underline cursor-pointer"
              onClick="javascript:window.open('/popup/credit','Tambah Tagihan Baru','width=600,height=500')"
              >Tambah Tagihan</a
            ></label
          >
          <input type="text" id="credit-id" placeholder="Masukan ID tagihan" autocomplete="off" />
          <ul id="credits-suggestion" class="suggestion-box hidden"></ul>
        </div>
        <div class="lg:col-span-1">
          <label for="credit-total">Total Tagihan</label>
          <input type="text" id="credit-total" placeholder="Masukan jumlah terbayar" />
        </div>
        <div class="lg:col-span-1">
          <label for="credit-paid">Terbayar</label>
          <input type="text" id="credit-paid" placeholder="Masukan jumlah terbayar" value="0" />
        </div>
      </div>
      <div
        class="lg:col-span-4 flex items-center w-full p-4 mb-1 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400"
        role="alert">
        <svg
          class="flex-shrink-0 inline w-4 h-4 me-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 20 20">
          <path
            d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
        </svg>
        <span class="sr-only">Info</span>
        <div>
          <span class="font-medium">Info!</span>
          Setiap merubah kamar atau ekstra, jangan lupa klik simpan perubahan.
        </div>
      </div>
      <div class="flex gap-2">
        <button type="submit">Check-Out</button>
        <div id="update-btn" class="hidden">
          <button type="button" class="cyan" onClick="updateRoom()">Simpan Perubahan</button>
        </div>
        <button type="button" class="emerald" onclick="payOffBook()">Lunasi Booking</button>
        <button type="button" class="red" onclick="undoCheckIn()">Batalkan Check In</button>
      </div>
    </form>
    <div class="flex-1 flex flex-col gap-4">
      <div>
        <a
          href="/checkout/<%= detail.id %>/extends"
          class="px-4 block text-center py-3 text-sm font-medium text-white bg-teal-500 rounded-lg md:w-auto focus:outline-none hover:bg-teal-600 hover:text-white focus:ring-4 focus:ring-teal-200 dark:focus:ring-teal-700 dark:bg-gray-900 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
          Atur Durasi Menginap
        </a>
      </div>
      <div
        id="form-info-acc"
        class="bg-gray-50 text-gray-500 p-4 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-500 dark:text-gray-200">
        <h2 class="mb-3">Keterangan pemesanan :</h2>
        <table class="w-full text-sm">
          <tr class="border-b border-gray-300 h-2">
            <td class="py-2 w-40">Nomor Kamar</td>
            <td class="py-2 px-4">:</td>
            <td class="py-2"><span class="room-number"></span></td>
          </tr>
          <tr class="border-b border-gray-300 h-2">
            <td class="py-2 w-40">Jumlah Malam</td>
            <td class="py-2 px-4">:</td>
            <td class="py-2"><span class="room-night"></span></td>
          </tr>
          <tr class="border-b border-gray-300 h-2">
            <td class="py-2 w-40">Kategori Kamar</td>
            <td class="py-2 px-4">:</td>
            <td class="py-2"><span class="room-type"></span></td>
          </tr>
          <tr class="border-b border-gray-300 h-2">
            <td class="py-2 w-40">Tipe Kamar</td>
            <td class="py-2 px-4">:</td>
            <td class="py-2"><span class="room-smoking"></span></td>
          </tr>
          <tr class="border-b border-gray-300 h-2">
            <td class="py-2">Tipe Bed</td>
            <td class="py-2 px-4">:</td>
            <td class="py-2"><span class="room-bed"></span></td>
          </tr>
          <tr class="border-b border-gray-300 h-2">
            <td class="py-2">Asal Pemesanan</td>
            <td class="py-2 px-4">:</td>
            <td class="py-2"><span class="room-booking-source"><%= detail.source %></span></td>
          </tr>
          <tr class="h-2">
            <td class="py-2 align-top">Keterangan</td>
            <td class="py-2 px-4 align-top">:</td>
            <td class="py-2">
              <span class="room-detail"></span>
            </td>
          </tr>
        </table>
        <p class="text-right text-xs mt-4 text-gray-500">Dibuat pada : <%= detail.createdAt %></p>
        <p class="text-right text-xs mt-4 text-gray-500">Diterima : <%= detail.receivedBy %></p>
      </div>
      <div>
        <div
          id="acc-sales"
          data-accordion="collapse"
          data-active-classes="bg-blue-100 dark:bg-gray-800 text-blue-600 dark:text-white">
          <h2 id="acc-sales-heading">
            <button
              type="button"
              class="bg-blue-50 dark:bg-gray-900 flex items-center justify-between w-full p-4 rtl:text-right text-gray-500 border border-gray-200 rounded-t-xl dark:border-gray-700 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-gray-800 gap-3"
              data-accordion-target="#acc-sales-body"
              aria-expanded="false"
              aria-controls="acc-sales-body">
              <span>Daftar Transaksi Barang</span>
              <svg
                data-accordion-icon
                class="w-3 h-3 rotate-180 shrink-0"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 10 6">
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5 5 1 1 5" />
              </svg>
            </button>
          </h2>
          <div id="acc-sales-body" class="hidden" aria-labelledby="acc-sales-heading">
            <div class="table_container rounded-b-lg border-t-0">
              <table id="table-goods" class="table_fb">
                <thead class="table_fb__head">
                  <tr>
                    <th scope="col">Nama Barang</th>
                    <th scope="col">Harga (Rp)</th>
                    <th scope="col">Qty</th>
                    <th scope="col">Aksi</th>
                  </tr>
                </thead>
                <tbody class="table_fb__body">
                  <tr>
                    <td class="px-6 py-4" colspan="5">Tidak ada barang yang dibeli</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  // NIGHT INFO STUFF
  const calculateNights = () => {
    const startDate = new Date('<%= detail.startDate %>')
    const endDate = new Date('<%= detail.endDate %>')
    // Calculate the time difference in milliseconds, convert to days, and display the result
    const nightDifference = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24))

    return nightDifference
  }

  // INIT VALUE
  let finesTotal = 0
  let salesTotal = 0
  let totalCheckOutPrice = 0
  let isRoomChanged = false

  // CONSTANT VALUE
  const bookingId = '<%= params %>'
  const nightCount = calculateNights()
  const guestId = '<%= detail.guest %>'

  // INIT VALUE WHEN INC/DEC EXTRA

  const initAddPerson = Number('<%= person %>')
  const initAddBed = Number('<%= bed %>')
  const initAddBreakfast = Number('<%= breakfast %>')

  // INITIAL EXTRA PRICE VALUE ACC TO DB/BOOKING STATE QTY
  let initPersonQty = Number('<%= detail.extraPerson %>')
  let initBedQty = Number('<%= detail.extraBed %>')
  let initBreakfastQty = Number('<%= detail.extraBreakfast %>')
  let initDecor = Number('<%= detail.extraDecor %>')

  // EXTRA VALUE
  let extraPerson = initAddPerson * initPersonQty
  let extraBed = initAddBed * initBedQty
  let extraBreakfast = initAddBreakfast * initBreakfastQty
  let extraDecor = initDecor

  // ROOM VALUE (ROOM CHANGING MITIGATION)
  const currentRoomId = '<%= detail.room %>'
  let roomId = '<%= detail.room %>'
  let roomNumber = '<%= detail.roomNumber %>'
  let roomCat = '<%= detail.roomCat %>'
  let roomSmoking = '<%= detail.smoking %>'
  let roomBedType = '<%= detail.bed %>'
  let roomCatDetail = '<%= detail.roomDetail %>'

  // EXTRA STUFF
  const roomBedEl = document.querySelector('#room-bed')
  const roomPersonEl = document.querySelector('#room-person')
  const roomBreakfastEl = document.querySelector('#room-breakfast')
  const roomDecorEl = document.querySelector('#room-decor')
  const roomDepositEl = document.querySelector('#room-deposit')

  // OPTION STUFF
  roomPersonEl.innerHTML = `
    <option value="0" ${initPersonQty === 0 ? 'selected' : ''}>0</option>
    <option value="1" ${initPersonQty === 1 ? 'selected' : ''}>1</option>
    <option value="2" ${initPersonQty === 2 ? 'selected' : ''}>2</option>
    <option value="3" ${initPersonQty === 3 ? 'selected' : ''}>3</option>
    <option value="4" ${initPersonQty === 4 ? 'selected' : ''}>4</option>
    <option value="5" ${initPersonQty === 5 ? 'selected' : ''}>5</option>
  `
  roomPersonEl.addEventListener('change', (e) => {
    const price = initAddPerson * Number(e.target.value)
    extraPerson = price
    initPersonQty = Number(e.target.value)
    isRoomChanged = true

    triggerUpdateEvent()
  })

  roomBedEl.addEventListener('change', (e) => {
    const price = initAddBed * Number(e.target.value)
    extraBed = price
    initBedQty = Number(e.target.value)
    isRoomChanged = true

    triggerUpdateEvent()
  })

  roomBreakfastEl.addEventListener('change', (e) => {
    const price = initAddBreakfast * Number(e.target.value)
    extraBreakfast = price
    initBreakfastQty = Number(e.target.value)
    isRoomChanged = true

    triggerUpdateEvent()
  })

  roomDecorEl.addEventListener('change', (e) => {
    if (e.target.value === '') {
      e.target.value = 0
    }
    extraDecor = Number(removeCurrency(e.target.value))
    isRoomChanged = true

    triggerUpdateEvent()
  })

  roomDepositEl.addEventListener('change', (e) => {
    if (e.target.value === '') {
      e.target.value = 0
    }
  })

  roomBedEl.innerHTML = `
    <option value="0" ${initBedQty === 0 ? 'selected' : ''}>0</option>
    <option value="1" ${initBedQty === 1 ? 'selected' : ''}>1</option>
    <option value="2" ${initBedQty === 2 ? 'selected' : ''}>2</option>
    <option value="3" ${initBedQty === 3 ? 'selected' : ''}>3</option>
    <option value="4" ${initBedQty === 4 ? 'selected' : ''}>4</option>
    <option value="5" ${initBedQty === 5 ? 'selected' : ''}>5</option>
  `
  roomBreakfastEl.innerHTML = `
    <option value="0" ${initBreakfastQty === 0 ? 'selected' : ''}>Tidak</option>
    <option value="1" ${initBreakfastQty === 1 ? 'selected' : ''}>Ya</option>
  `

  /**
   * TOTAL AMOUNT OF PAY
   * The main totals consist of (finesTotal + salesTotal + totalPrice)
   */
  const totalDiscount = Number('<%= detail.discount %>')
  let totalRoom = Number('<%= detail.totalRoom %>')
  let totalExtra = Number('<%= detail.totalExtra %>')
  let paid = Number('<%= detail.paid %>')
  let totalPrice = totalExtra + totalRoom
  let pay = totalPrice - paid

  const triggerUpdateEvent = () => {
    document.dispatchEvent(new Event('update-info'))
  }

  const triggerFinesEvent = () => {
    document.dispatchEvent(new Event('update-fines'))
  }

  const roomPaidEl = document.querySelector('#room-paid')
  const roomPayEl = document.querySelector('#room-pay')
  const roomTotalEl = document.querySelector('#room-total')
  const roomCOTotal = document.querySelector('#room-co-total')

  const addSeparator = (number) => {
    const numString = number.toString()
    const parts = numString.split('.')
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, '.')
    const formattedNumber = parts.join('.')

    return formattedNumber
  }
  // ROOM SUGGESTION STUFF
  const roomListInputEl = document.querySelector('#room-list')
  const roomSuggestion = document.querySelector('#rooms-list-suggestion')

  const addHideClass = (el) => {
    const element = document.querySelector(el)
    element.classList.add('hide')
  }
  const removeHideClass = (el) => {
    const element = document.querySelector(el)
    element.classList.remove('hide')
  }

  const clickToFillRoomElValue = async (value) => {
    const roomListInput = document.querySelector('#room-list')
    const getRoomDetail = (await axios.get(`/api/rooms/${value}`)).data.data
    const getRoomCatDetail = (await axios.get(`/api/rooms/category/${getRoomDetail.category}`)).data.data

    totalRoom = getRoomCatDetail.price * nightCount
    totalPrice = totalRoom + totalExtra
    roomId = value

    roomNumber = getRoomDetail.number
    roomCat = getRoomCatDetail.category
    roomSmoking = getRoomDetail.smoking
    roomBedType = getRoomDetail.bed
    roomCatDetail = getRoomCatDetail.detail

    roomListInput.value = value

    addHideClass('#rooms-list-suggestion')
    roomTotalEl.value = addSeparator(totalPrice)
    isRoomChanged = true

    triggerUpdateEvent()
  }

  const checkIsRoomAvailable = (arr) => {
    if (!arr.length) {
      addHideClass('#rooms-list-suggestion')
    } else {
      removeHideClass('#rooms-list-suggestion')
    }
  }

  const roomBySearch = async () => {
    const roomInputValue = document.querySelector('#room-list').value
    const roomSuggestion = document.querySelector('#rooms-list-suggestion ul')
    const response = (
      await axios.get(
        `/api/bookings/date?start=<%= detail.startDate %>&end=<%= detail.endDate %>&search=${roomInputValue}`
      )
    ).data.data
    checkIsRoomAvailable(response)
    roomSuggestion.innerHTML = ''
    response.forEach((data) => {
      roomSuggestion.innerHTML += `
      <li onClick="clickToFillRoomElValue('${data.id}')" class="suggestions_list">${data.number} / ${data.category} / ${
        data.available ? 'Tersedia' : 'Tdk. Tersedia'
      }</li>
        `
    })
  }

  roomListInputEl.addEventListener('input', (e) => {
    roomBySearch()
  })

  /**
   * Make a right total price towards discount
   */
  const getTotalComplete = () => {
    const all = finesTotal + salesTotal + (totalPrice - paid)

    return all - totalDiscount
  }

  // CLOSE ROOM LIST OUTSIDE CLICK
  document.addEventListener('click', (e) => {
    if (!e.target.closest('#rooms-list-suggestion') && !e.target.closest('#room-list')) {
      addHideClass('#rooms-list-suggestion')
    }
  })

  // CART SALES STUFF
  const deleteCartItem = async (id) => {
    const { isConfirmed } = await Swal.fire({
      title: 'Yakin menghapus item ini?',
      text: 'Pastikan keputusan ini atas pertimbangan yang tepat',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Hapus'
    })

    if (isConfirmed) {
      try {
        await axios.delete(`/api/sales/${id}`)
        await Swal.fire({
          title: 'Berhasil!',
          text: 'Item berhasil dihapus',
          icon: 'success',
          confirmButtonText: 'Oke!'
        })
        location.reload()
      } catch (error) {
        const errMessage = error.response.data.message
        await Swal.fire({
          title: 'Error!',
          text: errMessage,
          icon: 'error',
          confirmButtonText: 'Tutup'
        })
      }
    }
  }

  document.addEventListener('DOMContentLoaded', async () => {
    // SALES STUFF
    const salesTableBody = document.querySelector('.table_fb__body')
    const totalSalesInputEl = document.querySelector('#room-sales')
    const bookingSales = (await axios.get(`/api/sales/${bookingId}`)).data.data
    const roomNumberEl = document.querySelector('.room-number')

    roomNumberEl.innerHTML = roomNumber

    if (bookingSales.length) {
      salesTableBody.innerHTML = ''
      bookingSales.forEach((sale) => {
        salesTotal += sale.total
        salesTableBody.innerHTML += `
        <tr>
          <td class="px-2 py-4">${sale.name}</td>
          <td class="px-2 py-4">${addSeparator(sale.price)}</td>
          <td class="px-2 py-4">${sale.quantity}</td>
          <td class="px-2 py-4">
            <a class="cursor-pointer flex justify-center" onClick="deleteCartItem('${sale.id}')">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-red-400" viewBox="0 0 256 256">
                <g fill="currentColor"><path d="M200 56v152a8 8 0 0 1-8 8H64a8 8 0 0 1-8-8V56Z" opacity=".2"/><path d="M216 48h-40v-8a24 24 0 0 0-24-24h-48a24 24 0 0 0-24 24v8H40a8 8 0 0 0 0 16h8v144a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16V64h8a8 8 0 0 0 0-16M96 40a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v8H96Zm96 168H64V64h128Zm-80-104v64a8 8 0 0 1-16 0v-64a8 8 0 0 1 16 0m48 0v64a8 8 0 0 1-16 0v-64a8 8 0 0 1 16 0"/></g>
              </svg>
            </a>
          </td>
        </tr>
      `
      })
      totalSalesInputEl.value = addSeparator(salesTotal)
    }
    // FINES STUFF
    const fines = (await axios.get('/api/fines')).data.data
    const finesContainerEl = document.querySelector('.fines-container')
    const finesInputEl = document.querySelector('.fines-input-container')

    if (!fines.length) {
      finesInputEl.classList.add('hidden')
    }

    fines.forEach((fine) => {
      finesContainerEl.innerHTML += `
      <div class="checkbox_container">
        <input id="${fine.id}" type="checkbox" value="${fine.price}"/>
        <label for="${fine.id}">${fine.fine} (${addSeparator(fine.price)})</label>
      </div>
      `
    })

    const checkboxesInput = finesContainerEl.querySelectorAll('input[type="checkbox"]')
    checkboxesInput.forEach((checkbox) => {
      checkbox.addEventListener('change', (e) => {
        const value = Number(e.target.value)
        if (checkbox.checked) {
          finesTotal += value
          triggerFinesEvent()
        } else {
          finesTotal -= value
          triggerFinesEvent()
        }
      })
    })

    // SET BOOKING DOM STATE
    roomTotalEl.value = addSeparator(totalPrice)
    roomPaidEl.value = addSeparator(paid)
    roomDecorEl.value = addSeparator(initDecor)
    roomDepositEl.value = addSeparator(Number('<%= detail.deposit %>'))
    decorTemp = initDecor

    const addPersonInitEl = document.querySelector('.add-person-init')
    const addBedInitEl = document.querySelector('.add-bed-init')
    const addBreakfastInitEl = document.querySelector('.add-breakfast-init')

    addPersonInitEl.innerHTML = addSeparator(initAddPerson)
    addBedInitEl.innerHTML = addSeparator(initAddBed)
    addBreakfastInitEl.innerHTML = addSeparator(initAddBreakfast)

    // SET ROOM INFO
    const response = (await axios.get(`/api/bookings/detail/${bookingId}`)).data.data

    const roomTypEl = document.querySelector('.room-type')
    const roomSmokingEl = document.querySelector('.room-smoking')
    const roomBedEl = document.querySelector('.room-bed')
    const roomDetailEl = document.querySelector('.room-detail')
    const roomNightEl = document.querySelector('.room-night')
    const { category: categoryId, smoking, bed } = (await axios.get(`/api/rooms/${response.room}`)).data.data

    const { category, detail } = (await axios.get(`/api/rooms/category/${categoryId}`)).data.data

    roomTypEl.innerHTML = category
    roomSmokingEl.innerHTML = smoking ? 'Smoking' : 'Non-Smoking'
    roomBedEl.innerHTML = bed
    roomDetailEl.innerHTML = detail
    roomNightEl.innerHTML = nightCount

    roomCOTotal.value = addSeparator(getTotalComplete())

    setCreditTotal()
  })

  document.addEventListener('update-fines', () => {
    // FINES
    const finesTotalEl = document.querySelector('#room-fines')
    finesTotalEl.value = addSeparator(finesTotal)

    roomCOTotal.value = addSeparator(getTotalComplete())

    setCreditTotal()
  })

  document.addEventListener('update-info', () => {
    // CO TOTAL
    const roomNumberEl = document.querySelector('.room-number')
    const roomCatEl = document.querySelector('.room-type')
    const roomSmokingEl = document.querySelector('.room-smoking')
    const roomBedTypeEl = document.querySelector('.room-bed')
    const roomCatDetailEl = document.querySelector('.room-detail')

    roomNumberEl.innerHTML = roomNumber
    roomCatEl.innerHTML = roomCat
    roomSmokingEl.innerHTML = JSON.parse(roomSmoking) ? 'Smoking' : 'Non-Smoking'
    roomBedTypeEl.innerHTML = roomBedType
    roomCatDetailEl.innerHTML = roomCatDetail

    totalExtra = extraPerson + extraBed + extraDecor + extraBreakfast
    totalPrice = totalExtra + totalRoom
    pay = totalPrice - paid

    roomTotalEl.value = addSeparator(totalPrice)
    roomCOTotal.value = addSeparator(getTotalComplete())

    setCreditTotal()

    // SAVE CHANGES STUFF
    const updateBtn = document.querySelector('#update-btn')
    if (isRoomChanged) {
      updateBtn.classList.remove('hidden')
    }
  })

  // UPDATE ROOM
  const updateRoom = async () => {
    const { isConfirmed } = await Swal.fire({
      title: 'Perubahan Kamar',
      text: 'Yakin memperbaharui kamar tamu?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Ubah',
      cancelButtonText: 'Batal'
    })

    if (isConfirmed) {
      try {
        const payload = {
          room: roomId,
          totalRoom,
          oldRoom: currentRoomId,
          totalExtra,
          extraPerson: initPersonQty,
          extraBed: initBedQty,
          extraBreakfast: initBreakfastQty,
          extraDecor
        }

        await axios.patch(`/api/bookings/checkout/room/${bookingId}`, payload)
        await Swal.fire({
          title: 'Berhasil!',
          text: 'Anda berhasil mengubah kamar booking.',
          icon: 'success',
          confirmButtonText: 'Oke!'
        })
        location.reload()
      } catch (error) {
        const errMessage = error.response.data.message
        await Swal.fire({
          title: 'Error!',
          text: errMessage,
          icon: 'error',
          confirmButtonText: 'Tutup'
        })
      }
    }
  }

  // PAY-OFF BOOK
  const payOffBook = async () => {
    const { isConfirmed } = await Swal.fire({
      title: 'Pelunasan Booking',
      text: 'Pelunasan booking akan mengosongkan "Total Pembayaran Tambahan". Lakukan dengan hati-hati, tindakan tidak bisa dikembalikan.',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Lunas',
      cancelButtonText: 'Batal'
    })

    if (isConfirmed) {
      try {
        const newPaid = getTotalComplete()
        if (isRoomChanged) {
          throw new Error('Perubahan belum disimpan')
        }
        if (newPaid === 0) {
          throw new Error('Tidak ada perubahan nilai pembayaran')
        }
        await axios.patch(`/api/bookings/payoff/${bookingId}`, { newPaid })

        await Swal.fire({
          title: 'Berhasil!',
          text: 'Booking ini telah lunas.',
          icon: 'success',
          confirmButtonText: 'Oke!'
        })
        location.reload()
      } catch (error) {
        const errMessage = error?.response?.data?.message || error.message

        await Swal.fire({
          title: 'Error!',
          text: errMessage,
          icon: 'error',
          confirmButtonText: 'Tutup'
        })
      }
    }
  }

  // UNDO CHECK IN
  const undoCheckIn = async () => {
    const { isConfirmed } = await Swal.fire({
      title: 'Pembatalan Check In',
      text: 'Yakin membatalkan check in?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Batalkan',
      cancelButtonText: 'Tutup'
    })

    if (isConfirmed) {
      try {
        await axios.patch(`/api/bookings/checkin/undo/${bookingId}`)

        await Swal.fire({
          title: 'Berhasil!',
          text: 'Check In dibatalkan',
          icon: 'success',
          confirmButtonText: 'Oke!'
        })
        location.replace(`/checkin/${bookingId}`)
      } catch (error) {
        const errMessage = error?.response?.data?.message || error.message

        await Swal.fire({
          title: 'Error!',
          text: errMessage,
          icon: 'error',
          confirmButtonText: 'Tutup'
        })
      }
    }
  }

  // SUBMIT STUFF
  const formSubmit = document.querySelector('#form-checkin')

  formSubmit.addEventListener('submit', async (e) => {
    e.preventDefault()
    const checkbox = document.querySelector('#credit-checkbox').checked
    const creditId = document.querySelector('#credit-id').value

    let messageQuest
    if (checkbox) {
      messageQuest = 'Yakin merubah status tamu menjadi check-out dengan status kredit?'
    } else {
      messageQuest = 'Yakin merubah status tamu menjadi check-out?'
    }

    const { isConfirmed } = await Swal.fire({
      title: 'Check-Out',
      text: messageQuest,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Check-Out',
      cancelButtonText: 'Batal'
    })

    if (isConfirmed) {
      try {
        const payload = {
          fines: finesTotal,
          paid: totalPrice + finesTotal - totalDiscount,
          discount: totalDiscount,
          roomNumber,
          pay: getTotalComplete(),
          guest: guestId
        }
        if (isRoomChanged) {
          throw new Error('Perubahan belum disimpan')
        }

        if (checkbox) {
          if (!creditId) {
            throw new Error('Credit ID harus diisi dan valid')
          }
        }

        const response = (await axios.patch(`/api/bookings/checkout/${bookingId}`, payload)).data.data

        let messageRes

        if (checkbox) {
          await submitCredit(response)
          messageRes = `Anda berhasil menambahkan check-out baru sebagai kredit`
        } else {
          messageRes = `Anda berhasil menambahkan check-out baru`
        }

        await Swal.fire({
          title: 'Berhasil!',
          text: messageRes,
          icon: 'success',
          confirmButtonText: 'Oke!'
        })
        location.replace(`/transaction/${response}/print`)
      } catch (error) {
        const errMessage = error?.response?.data?.message || error.message
        await Swal.fire({
          title: 'Error!',
          text: errMessage,
          icon: 'error',
          confirmButtonText: 'Tutup'
        })
      }
    }
  })

  new CurrencyBeautify({
    inputElement: '#credit-total'
  })

  new CurrencyBeautify({
    inputElement: '#credit-paid'
  })

  new CurrencyBeautify({
    inputElement: '#room-decor'
  })

  new SuggestionBox({
    inputElement: '#credit-id',
    element: '#credits-suggestion',
    apiGet: '/api/credit',
    listChildEl: (data) => {
      return `
      <li class="suggestion-item" title="${data.name} - ${formatISODate(data.due)}" data-id="${data.id}">${
        data.name
      } - ${formatISODate(data.due)}</li>`
    }
  })

  // CREDITS STUFF
  const creditTotalInput = document.querySelector('#credit-total')
  const creditPaidInput = document.querySelector('#credit-paid')

  const setCreditTotal = () => {
    creditTotalInput.value = addSeparator(finesTotal + salesTotal + totalPrice - totalDiscount)
  }

  const limitCreditInput = (e) => {
    const totalPriceComplete = finesTotal + salesTotal + totalPrice
    if (CurrencyBeautify.removeCurrency(e.target.value) > totalPriceComplete) {
      e.target.value = addSeparator(totalPriceComplete)
      return
    }
  }

  creditTotalInput.addEventListener('change', limitCreditInput)
  creditPaidInput.addEventListener('change', limitCreditInput)

  const submitCredit = async (settledInvoice) => {
    const creditId = document.querySelector('#credit-id').value
    const creditTotal = CurrencyBeautify.removeCurrency(document.querySelector('#credit-total').value)
    const creditPaid = CurrencyBeautify.removeCurrency(document.querySelector('#credit-paid').value)

    try {
      const payload = {
        creditId,
        settledInvoice,
        creditPaid,
        creditTotal
      }
      await axios.post('/api/credit-transaction', payload)
    } catch (error) {
      const errMessage = error?.response?.data?.message || error.message
      throw new Error(errMessage)
    }
  }
</script>
